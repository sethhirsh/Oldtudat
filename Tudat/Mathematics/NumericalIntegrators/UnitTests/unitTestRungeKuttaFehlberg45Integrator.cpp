/*    Copyright (c) 2010-2012, Delft University of Technology
 *    All rights reserved.
 *
 *    Redistribution and use in source and binary forms, with or without modification, are
 *    permitted provided that the following conditions are met:
 *      - Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 *      - Redistributions in binary form must reproduce the above copyright notice, this list of
 *        conditions and the following disclaimer in the documentation and/or other materials
 *        provided with the distribution.
 *      - Neither the name of the Delft University of Technology nor the names of its contributors
 *        may be used to endorse or promote products derived from this software without specific
 *        prior written permission.
 *
 *    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 *    OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *    MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *    GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 *    OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *    Changelog
 *      YYMMDD    Author            Comment
 *      120203    B. Tong Minh      Copied RungeKutta4Stepsize unit test.
 *      120207    K. Kumar          Adapted to use modified benchmark functions in Tudat Core.
 *      120213    K. Kumar          Modified getCurrentInterval() to getIndependentVariable();
 *                                  transferred to Boost unit test framework.
 *      120321    K. Kumar          Updated (Burden and Faires, 2011) benchmark function call.
 *      120323    K. Kumar          Rewrote unit tests to use benchmark data from
 *                                  (Burden and Faires, 2011); removed test against benchmark
 *                                  functions; renamed file to RFK45 unit test. Other unit tests
 *                                  for other Runge-Kutta methods will appear in other dedicated
 *                                  unit test files.
 *      120327    K. Kumar          Added missing comments; added unit test based on output data
 *                                  generated by (The Mathworks, 2012).
 *      120328    K. Kumar          Moved (Burden and Faires, 2011) test class to its own file;
 *                                  modified Matlab unit tests to test forward and backwards in
 *                                  time and "forced" and "free" adaptive step size adjustment and
 *                                  moved to separate file (added call to function to run Matlab
 *                                  tests); added rollback tests for all cases.
 *      120404    K. Kumar          Updated Matlab unit test by adding discrete-event data file.
 *
 *    References
 *      Burden, R.L., Faires, J.D. Numerical Analysis, 7th Edition, Books/Cole, 2001.
 *      Montenbruck, O., Gill, E. Satellite Orbits: Models, Methods, Applications, Springer, 2005.
 *      The Mathworks, Inc. RKF78, Symbolic Math Toolbox, 2012.
 *
 */

#define BOOST_TEST_MAIN

#include <limits>
#include <string>
#include <utility>

#include <boost/bind.hpp>
#include <boost/test/unit_test.hpp>

#include <Eigen/Core>

#include <TudatCore/Mathematics/BasicMathematics/mathematicalConstants.h>

#include "Tudat/InputOutput/basicInputOutput.h"
#include "Tudat/InputOutput/matrixTextFileReader.h"
#include "Tudat/Mathematics/NumericalIntegrators/UnitTests/burdenAndFairesNumericalIntegratorTest.h"
#include "Tudat/Mathematics/NumericalIntegrators/UnitTests/matlabNumericalIntegratorTest.h"
#include "Tudat/Mathematics/NumericalIntegrators/rungeKuttaVariableStepSizeIntegrator.h"
#include "Tudat/Mathematics/NumericalIntegrators/rungeKuttaCoefficients.h"

namespace tudat
{
namespace unit_tests
{

BOOST_AUTO_TEST_SUITE( test_runge_kutta_fehlberg_45_integrator )

using numerical_integrators::RungeKuttaVariableStepSizeIntegratorXd;
using numerical_integrators::RungeKuttaCoefficients;

//! Test Runge-Kutta-Fehlberg 45 integrator using benchmark data from (Burden and Faires, 2001).
BOOST_AUTO_TEST_CASE( testRungeKuttaFehlberg45IntegratorUsingBurdenAndFairesData )
{
    // Read in benchmark data (Table 5.9 from (Burden and Faires, 2001)).
    std::string pathToBenchmarkDatafile = tudat::input_output::getTudatRootPath( )
            + "/Mathematics/NumericalIntegrators/UnitTests/table5_6BurdenAndFaires.txt";

    // Store benchmark data in matrix.
    Eigen::MatrixXd table5_9BurdenAndFaires
            = tudat::input_output::readMatrixFromFile( pathToBenchmarkDatafile );

    // Declare constants related to the benchmark file.
    const int FINAL_ROW = table5_9BurdenAndFaires.rows( ) - 1;
    const int TIME_COLUMN_INDEX = 0;
    const int EXPECTED_LOWER_ORDER_STATE_COLUMN_INDEX = 2;
    const int EXPECTED_STEP_SIZE_COLUMN_INDEX = 3;
    const int EXPECTED_RELATIVE_ERROR_COLUMN_INDEX = 4;
    const int EXPECTED_HIGHER_ORDER_STATE_COLUMN_INDEX = 6;

    // Set parameters of integration taken from (Burden and Faires, 2001).
    // This should to be added to the benchmark data file and parsed accordingly once the Tudat
    // parser architecture has been added to the library.
    const double initialTime = 0.0;
    const double finalTime = 2.0;
    const Eigen::VectorXd initialState = Eigen::VectorXd::Constant( 1, 0.5 );
    const double initialStepSize = 0.25;
    const double minimumStepSize = 0.01;
    const double maximumStepSize = 0.25;
    const double relativeErrorTolerance = 0.0;
    const double absoluteErrorTolerance = 1.0e-5;
    const double safetyFactorForNextStepSize = 0.84;
    const double maximumFactorIncreaseForNextStepSize = 4.0;
    const double minimumFactorDecreaseForNextStepSize = 0.1;

    // Declare Burden and Faires class object, containing new step size and state derivative
    // functions.
    BurdenAndFairesNumericalIntegratorTest burdenAndFairesNumericalIntegratorTest;

    // Case 1: Use integrateTo() to integrate to final time in one step and check results against
    // benchmark data from Burden and Faires.
    {
        // Declare integrator with all necessary settings.
        RungeKuttaVariableStepSizeIntegratorXd integrator(
                    RungeKuttaCoefficients::get( RungeKuttaCoefficients::rungeKuttaFehlberg45 ),
                    boost::bind( &BurdenAndFairesNumericalIntegratorTest::computeStateDerivative,
                                 &burdenAndFairesNumericalIntegratorTest, _1, _2 ),
                    initialTime,
                    initialState,
                    minimumStepSize,
                    maximumStepSize,
                    relativeErrorTolerance,
                    absoluteErrorTolerance,
                    safetyFactorForNextStepSize,
                    maximumFactorIncreaseForNextStepSize,
                    minimumFactorDecreaseForNextStepSize,
                    boost::bind( &BurdenAndFairesNumericalIntegratorTest::computeNewStepSize,
                                 &burdenAndFairesNumericalIntegratorTest,
                                 _1, _2, _3, _4, _5, _6, _7, _8 ) );

        // Integrator to final time.
        Eigen::VectorXd finalState = integrator.integrateTo( finalTime, initialStepSize );

        // Check that the computed final time matches the required final time.
        BOOST_CHECK_CLOSE_FRACTION( table5_9BurdenAndFaires( FINAL_ROW, TIME_COLUMN_INDEX ),
                                    integrator.getCurrentIndependentVariable( ),
                                    std::numeric_limits< double >::epsilon( ) );

        // Check that computed final state matches the expected final state.
        BOOST_CHECK_CLOSE_FRACTION(
                    table5_9BurdenAndFaires( FINAL_ROW, EXPECTED_LOWER_ORDER_STATE_COLUMN_INDEX ),
                    finalState( 0 ), 1.0e-8 );

        // Roll back to the previous step. This should be possible since the integrateTo() function
        // was called above.
        BOOST_CHECK( integrator.rollbackToPreviousState( ) );

        // Check that the rolled back time is as required.
        BOOST_CHECK_CLOSE_FRACTION(
                    table5_9BurdenAndFaires( FINAL_ROW - 1, TIME_COLUMN_INDEX ),
                    integrator.getCurrentIndependentVariable( ), 1.0e-8 );

        // Check that the rolled back state is as required. This test should be exact.
        BOOST_CHECK_CLOSE_FRACTION(
                    table5_9BurdenAndFaires( FINAL_ROW - 1,
                                             EXPECTED_LOWER_ORDER_STATE_COLUMN_INDEX ),
                    integrator.getCurrentState( )( 0 ), 1.0e-8 );

        // Check that it is now not possible to roll back.
        BOOST_CHECK( !integrator.rollbackToPreviousState( ) );
    }

    // Case 2: Use integrateTo() to integrate to final time in multiple steps and check results
    // against benchmark data from Burden and Faires.
    {
        // Declare integrator with all necessary settings.
        RungeKuttaVariableStepSizeIntegratorXd integrator(
                    RungeKuttaCoefficients::get( RungeKuttaCoefficients::rungeKuttaFehlberg45 ),
                    boost::bind( &BurdenAndFairesNumericalIntegratorTest::computeStateDerivative,
                                 &burdenAndFairesNumericalIntegratorTest, _1, _2 ),
                    initialTime,
                    initialState,
                    minimumStepSize,
                    maximumStepSize,
                    relativeErrorTolerance,
                    absoluteErrorTolerance,
                    safetyFactorForNextStepSize,
                    maximumFactorIncreaseForNextStepSize,
                    minimumFactorDecreaseForNextStepSize,
                    boost::bind( &BurdenAndFairesNumericalIntegratorTest::computeNewStepSize,
                                 &burdenAndFairesNumericalIntegratorTest,
                                 _1, _2, _3, _4, _5, _6, _7, _8 ) );

        // Store the initial step size as the step size to perform the first integration step.
        double stepSize = initialStepSize;

        for ( int i = 1; i < table5_9BurdenAndFaires.rows( ) - 1; i++ )
        {
            // Perform integration step using stored step size.
            integrator.performIntegrationStep( stepSize );

            // Check that the computed intermediate time matches the required intermediate time.
            BOOST_CHECK_CLOSE_FRACTION( table5_9BurdenAndFaires( i, TIME_COLUMN_INDEX ),
                                        integrator.getCurrentIndependentVariable( ),
                                        1.0e-8 );

            // Check that the computed intermediate state matches the required intermediate state.
            // Note that for some reason the check for table5_9BurdenAndFaires( 2, 2 ) failed
            // against a tolerance of 1.0e-8: this seems to come from the fact that the input data
            // from the file is read in incorrectly, introducing an error in the last significant
            // digit. All the other values satisfy a tolerance of 1.0e-8.
            BOOST_CHECK_CLOSE_FRACTION(
                        table5_9BurdenAndFaires( i, EXPECTED_LOWER_ORDER_STATE_COLUMN_INDEX ),
                        integrator.getCurrentState( )( 0 ),
                        1.0e-7 );

            // Check that the computed step size matches the required step size state.
            BOOST_CHECK_CLOSE_FRACTION(
                        table5_9BurdenAndFaires( i, EXPECTED_STEP_SIZE_COLUMN_INDEX ),
                        stepSize, 1.0e-7 );

            // Check that the computed relative error matches the required relative error.
            BOOST_CHECK_CLOSE_FRACTION(
                        table5_9BurdenAndFaires( i, EXPECTED_RELATIVE_ERROR_COLUMN_INDEX ),
                        burdenAndFairesNumericalIntegratorTest.relativeError_( 0 ), 1.0e-1 );

            // Check that the computed lower order estimate matches the required lower order
            // estimate. Note that this is the order that is integrated for the RFK-45 integrator.
            BOOST_CHECK_CLOSE_FRACTION(
                        table5_9BurdenAndFaires( i, EXPECTED_LOWER_ORDER_STATE_COLUMN_INDEX ),
                        burdenAndFairesNumericalIntegratorTest.lowerOrderEstimate_( 0 ),
                        1.0e-7 );

            // Check that the computed higher order estimate matches the required higher order
            // estimate.
            BOOST_CHECK_CLOSE_FRACTION(
                        table5_9BurdenAndFaires( i, EXPECTED_HIGHER_ORDER_STATE_COLUMN_INDEX ),
                        burdenAndFairesNumericalIntegratorTest.higherOrderEstimate_( 0 ),
                        1.0e-7 );

            // Update the step size for the next step based on the computed value in the
            // integrator.
            stepSize = integrator.getNextStepSize( );
        }

        // Store last time and state.
        const double lastTime = integrator.getCurrentIndependentVariable( );
        const Eigen::VectorXd lastState = integrator.getCurrentState( );

        // Integrate to final time.
        const Eigen::VectorXd finalState = integrator.integrateTo( finalTime,
                                                                   integrator.getNextStepSize( ) );

        // Check that the computed final time matches the required final time.
        BOOST_CHECK_CLOSE_FRACTION( finalTime,
                                    integrator.getCurrentIndependentVariable( ),
                                    std::numeric_limits< double >::epsilon( ) );

        // Check that computed final state matches the expected final state.
        BOOST_CHECK_CLOSE_FRACTION(
                    table5_9BurdenAndFaires( FINAL_ROW, EXPECTED_LOWER_ORDER_STATE_COLUMN_INDEX ),
                    finalState( 0 ), 1.0e-8 );

        // Check that the final state outputted by the integrator is the same as obtained from the
        // get-function.
        BOOST_CHECK_EQUAL( integrator.getCurrentState( ), finalState );

        // Roll back to the previous step. This should be possible since the
        // performIntegrationStep() function was called above.
        BOOST_CHECK( integrator.rollbackToPreviousState( ) );

        // Check that the rolled back time is as required. This test should be exact.
        BOOST_CHECK_EQUAL( lastTime, integrator.getCurrentIndependentVariable( ) );

        // Check that the rolled back state is as required. This test should be exact.
        BOOST_CHECK_EQUAL( lastState( 0 ), integrator.getCurrentState( )( 0 ) );

        // Check that it is now not possible to roll back.
        BOOST_CHECK( !integrator.rollbackToPreviousState( ) );
    }
}

//! Test Runge-Kutta-Fehlberg 45 integrator using benchmark data from (The Mathworks, 2012).
BOOST_AUTO_TEST_CASE( testRungeKuttaFehlberg45IntegratorUsingMatlabData )
{
    // Read in benchmark data (generated using Symbolic Math Toolbox in Matlab
    // (The Mathworks, 2012)). This data is generated using the RKF45b numerical integrator.
    std::string pathToBenchmarkDatafile = tudat::input_output::getTudatRootPath( )
            + "/Mathematics/NumericalIntegrators/UnitTests"
            + "/matlabOutputRungeKuttaFehlberg45.txt";

    // Read in discrete event benchmark data (generated using Symbolic Math Toolbox in Matlab
    // (The Mathworks, 2012)). This data is generated using the RKF45b numerical integrator.
    std::string pathToDiscreteEventBenchmarkDatafile = tudat::input_output::getTudatRootPath( )
            + "/Mathematics/NumericalIntegrators/UnitTests"
            + "/matlabOutputDiscreteEventRungeKuttaFehlberg45.txt";

    // Run Matlab integrator tests.
    matlab_numerical_integrator_tests::runMatlabNumericalIntegratorTests(
                pathToBenchmarkDatafile, 1.0e-14, 1.0e-11,
                RungeKuttaCoefficients::get( RungeKuttaCoefficients::rungeKuttaFehlberg45 ),
                pathToDiscreteEventBenchmarkDatafile );
}

BOOST_AUTO_TEST_SUITE_END( )

} // namespace unit_tests
} // namespace tudat
